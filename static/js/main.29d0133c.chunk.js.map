{"version":3,"sources":["serviceWorker.ts","state/todolists-reducer.ts","api/todolists-api.ts","utils/error-utils.ts","features/Auth/auth-reducer.ts","state/app-reducer.ts","api/tasks-api.ts","state/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/Auth/selectors.ts","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","state/store.ts","features/Auth/Login.tsx","app/selectors.ts","app/AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ResultCodeStatuses","instance","axios","create","baseURL","withCredentials","headers","todolistsApi","get","title","post","todolistId","delete","put","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","thunkAPI","a","res","resultCode","isLoginIn","rejectWithValue","errors","fieldsError","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","param","isInitialized","appReducer","TaskStatuses","TaskPriorities","setTodolistsThunk","todolists","removeTodolistTC","changeTodolistEntityStatusAC","id","addTodolistTC","success","todoList","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","elem","filter","entityStatus","map","tl","splice","unshift","todolistsReducer","tasksApi","taskId","setTasksThunk","then","tasks","items","removeTaskTC","todoListId","changeTaskEntityStatus","addTaskTC","updateTaskTC","getState","task","find","t","apiModel","startDate","priority","description","deadline","model","meta","arg","tasksReducer","AddItemForm","React","memo","props","useState","valueTask","setValueTask","setError","addItemHandler","trim","addItem","e","TextField","disabled","variant","label","helperText","onChange","currentTarget","onKeyPress","charCode","IconButton","onClick","color","style","marginLeft","AddBox","EditableSpan","editMode","setEditMode","setTitle","disableEditMode","autoFocus","onBlur","onDoubleClick","Task","onChangeTitleHandler","useCallback","changeTitle","key","className","Completed","position","Checkbox","checked","changeStatus","New","size","removeTask","top","right","Delete","fontSize","TodoList","changeFilter","addTask","removeTodoList","changeTitleTodoList","useDispatch","useEffect","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addTaskHandler","onChangeTitleTodoList","taskForTodoList","Paper","elevation","padding","listStyleType","paddingLeft","Button","selectIsLoggedIn","auth","TodolistsList","useSelector","thunk","addTodoList","Grid","container","spacing","flexWrap","overflowX","width","to","Alert","ErrorSnackbar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","validate","values","email","test","password","Login","formik","useFormik","initialValues","rememberMe","onSubmit","formikHelpers","rejected","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","selectStatus","selectIsInitialized","AppWithRedux","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","render","exact","textAlign","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.29d0133c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FilterValueType} from \"../trash/App\";\r\nimport {todolistsApi, TodolistType} from \"../api/todolists-api\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport enum ResultCodeStatuses {\r\n    success = 0,\r\n    failed = 1\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType;\r\n    entityStatus: RequestStatusType;\r\n}\r\n\r\nexport const setTodolistsThunk = createAsyncThunk('todolists/setTodolists', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n\r\n    try {\r\n        const res = await todolistsApi.getTodolists();\r\n        // dispatch(setTodolistsAC({todolists: res.data}));\r\n        dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        return {todolists: res.data};\r\n\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null);\r\n    }\r\n});\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}));\r\n\r\n    const res = await todolistsApi.deleteTodolist(todolistId);\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            return {todolistId: todolistId}\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null);\r\n    }\r\n});\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n\r\n    try {\r\n        const res = await todolistsApi.createTodolist(title);\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            // dispatch(addTodolistAC({todoList: res.data.data.item}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            return {todoList: res.data.data.item};\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null);\r\n    }\r\n});\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n\r\n    try {\r\n        const res = await todolistsApi.updateTodolistTitle(param.id, param.title);\r\n        dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        return {id: param.id, title: param.title}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null);\r\n    }\r\n});\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValueType }>) {\r\n            let index = state.findIndex(elem => elem.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            let index = state.findIndex(elem => elem.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(setTodolistsThunk.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}));\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            let index = state.findIndex(elem => elem.id === action.payload?.todolistId);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        });\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'});\r\n        });\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            let index = state.findIndex(elem => elem.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        });\r\n    }\r\n});\r\n\r\nexport const todolistsReducer = slice.reducer;\r\n\r\nexport const {changeTodolistFilterAC, changeTodolistEntityStatusAC} = slice.actions;\r\n\r\n//thunks\r\n// export const setTodolistsThunk = (dispatch: Dispatch) => {\r\n//\r\n//     dispatch(setAppStatusAC({status: 'loading'}));\r\n//     todolistsApi.getTodolists()\r\n//         .then(res => {\r\n//             dispatch(setTodolistsAC({todolists: res.data}));\r\n//             dispatch(setAppStatusAC({status: 'succeeded'}));\r\n//         })\r\n//         .catch(error => {\r\n//             handleServerNetworkError(error, dispatch);\r\n//         });\r\n// }\r\n// export const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}));\r\n//     dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}));\r\n//     todolistsApi.deleteTodolist(todolistId)\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(removeTodolistAC({todolistId}));\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}));\r\n//                 // dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'));\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             handleServerNetworkError(error, dispatch);\r\n//         });\r\n// }\r\n\r\n// export const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}));\r\n//     todolistsApi.createTodolist(title)\r\n//         .then(res => {\r\n//             if (res.data.resultCode === ResultCodeStatuses.success) {\r\n//                 dispatch(addTodolistAC({todoList: res.data.data.item}));\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}));\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch);\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             handleServerNetworkError(error, dispatch);\r\n//         });\r\n// }\r\n// export const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}));\r\n//     todolistsApi.updateTodolistTitle(todolistId, title)\r\n//         .then(res => {\r\n//             dispatch(changeTodolistTitleAC({id: todolistId, title}));\r\n//             dispatch(setAppStatusAC({status: 'succeeded'}));\r\n//         })\r\n//         .catch(error => {\r\n//             handleServerNetworkError(error, dispatch);\r\n//         });\r\n// }\r\n","import axios from 'axios'\r\n\r\nexport type TodolistType = {\r\n    id: string;\r\n    addedDate: string;\r\n    order: number;\r\n    title: string;\r\n}\r\n\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type CommonRespType<T = {}> = {\r\n    data: T\r\n    resultCode: number;\r\n    messages: Array<string>;\r\n    fieldsErrors?: Array<FieldErrorType>\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'd957613d-94bb-4388-aef0-47e775e83ac5'\r\n    }\r\n});\r\n\r\n\r\nexport const todolistsApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonRespType<{ item: TodolistType }>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonRespType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonRespType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\nexport type AuthMeRespType = {\r\n    id: number;\r\n    email: string;\r\n    login: string;\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type LoginErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<CommonRespType<AuthMeRespType>>('auth/me');\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonRespType<{ userId?: number }>>('/auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonRespType>('auth/login');\r\n    }\r\n}\r\n\r\n","import {setAppErrorAC, setAppStatusAC} from \"../state/app-reducer\";\r\nimport {CommonRespType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <T>(data: CommonRespType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}));\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error'}));\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}));\r\n}\r\n\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}));\r\n}\r\n\r\n","import {setAppStatusAC} from '../../state/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {authAPI, FieldErrorType, LoginParamsType} from '../../api/todolists-api';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const loginTC = createAsyncThunk<{ isLoginIn: boolean }, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldsError?: Array<FieldErrorType> }\r\n}>('auth/login', async (data, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    try {\r\n        const res = await authAPI.login(data);\r\n\r\n        if (res.data.resultCode === 0) {\r\n            // thunkAPI.dispatch(setIsLoggedInAC({value: true}));\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            return {isLoginIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsError: res.data.fieldsErrors});\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err;\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsError: undefined});\r\n    }\r\n});\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (data, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsError: res.data.fieldsErrors});\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsError: undefined});\r\n    }\r\n});\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n                // if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoginIn;\r\n                // }\r\n            }\r\n        );\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n                // if (action.payload) {\r\n                state.isLoggedIn = false;\r\n                // }\r\n            }\r\n        );\r\n    }\r\n});\r\n\r\n//reducer\r\nexport const authReducer = slice.reducer;\r\n//actions\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC;\r\n\r\n\r\n// thunks\r\n// export const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//     authAPI.login(data)\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(setIsLoggedInAC({value: true}))\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch)\r\n//             }\r\n//         })\r\n//         .catch((error) => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\n\r\n//ASYNC -AWAIT\r\n// export const logoutTC = () => async (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//\r\n//     try {\r\n//         const res = await authAPI.logout()\r\n//         if (res.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedInAC({value: false}))\r\n//             dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//         } else {\r\n//             handleServerAppError(res.data, dispatch)\r\n//         }\r\n//     } catch (error) {\r\n//         handleServerNetworkError(error, dispatch);\r\n//     }\r\n//\r\n// }\r\n//\r\n\r\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Auth/auth-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}));\r\n    }\r\n});\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status;\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = true;\r\n        })\r\n    }\r\n});\r\n\r\n//reducer\r\nexport const appReducer = slice.reducer;\r\n//actions\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions;\r\n//thunk\r\n// export const initializeAppTC = () => (dispatch: Dispatch) => {\r\n//     authAPI.me()\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(setIsLoggedInAC({value: true}));\r\n//             } else {\r\n//             }\r\n//             dispatch(setIsInitializedAC({isInitialized: true}));\r\n//         })\r\n// }\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'd957613d-94bb-4388-aef0-47e775e83ac5'\r\n    }\r\n});\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,// if Isdone = false\r\n    InProgress = 1,\r\n    Completed = 2,// if isDone =true\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string;\r\n    title: string;\r\n    // completed: boolean;\r\n    status: TaskStatuses;\r\n    priority: TaskPriorities;\r\n    startDate: string;\r\n    deadline: string;\r\n    id: string;\r\n    todoListId: string;\r\n    order: number;\r\n    addedDate: string;\r\n}\r\n\r\ntype GetTasksRespType = {\r\n    error: null | string;\r\n    totalCount: number;\r\n    items: TaskType[];\r\n}\r\n\r\ntype UpdateTaskRespType = {\r\n    messages: Array<string>;\r\n    resultCode: number;\r\n    data: {\r\n        item: TaskType;\r\n    };\r\n}\r\n\r\ntype CommonTaskRespType<T = {}> = {\r\n    messages: Array<string>;\r\n    resultCode: number;\r\n    data: T;\r\n}\r\n\r\nexport type UpdateTaskPayloadType = {\r\n    title: string;\r\n    description: string;\r\n    // completed: boolean;\r\n    status: number;\r\n    priority: number;\r\n    startDate: string;\r\n    deadline: string;\r\n}\r\n\r\nexport const tasksApi = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksRespType>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonTaskRespType<{ item: TaskType; }>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonTaskRespType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    updateTask(todolistId: string, taskId: string, payload: UpdateTaskPayloadType) {\r\n        return instance.put<CommonTaskRespType<{ item: TaskType; }>>(`todo-lists/${todolistId}/tasks/${taskId}`, payload);\r\n    }\r\n}","import {\r\n    changeTodolistEntityStatusAC,\r\n    removeTodolistTC,\r\n    ResultCodeStatuses,\r\n    setTodolistsThunk,\r\n    addTodolistTC,\r\n} from \"./todolists-reducer\";\r\nimport {tasksApi, TaskType, UpdateTaskPayloadType} from \"../api/tasks-api\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nconst initialState: TaskStateType = {};\r\n\r\nexport const setTasksThunk = createAsyncThunk('tasks/setTasks', (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    return tasksApi.getTasks(todolistId)\r\n        .then(res => {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            return {todolistId: todolistId, tasks: res.data.items};\r\n        });\r\n});\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todoListId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: param.todoListId, status: 'loading'}));\r\n    thunkAPI.dispatch(changeTaskEntityStatus({todoListId: param.todoListId, status: \"loading\", taskId: param.taskId}));\r\n    try {\r\n        const res = await tasksApi.deleteTask(param.todoListId, param.taskId);\r\n        if (res.data.resultCode === 0) {\r\n            // thunkAPI.dispatch(removeTaskAC({taskId: param.taskId, todoListId: param.todoListId}));\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            thunkAPI.dispatch(changeTodolistEntityStatusAC({id: param.todoListId, status: 'succeeded'}));\r\n            thunkAPI.dispatch(changeTaskEntityStatus({\r\n                todoListId: param.todoListId,\r\n                taskId: param.taskId,\r\n                status: 'succeeded'\r\n            }));\r\n            return {taskId: param.taskId, todoListId: param.todoListId};\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue(error);\r\n    }\r\n});\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { title: string, todoListId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    const res = await tasksApi.createTask(param.todoListId, param.title)\r\n    try {\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            return res.data.data.item;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue(null);\r\n    }\r\n});\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, todoListId: string, model: UpdateDomainTaskType }, {dispatch, getState, rejectWithValue}) => {\r\n    // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n    dispatch(changeTaskEntityStatus({status: \"loading\", taskId: param.taskId, todoListId: param.todoListId}));\r\n\r\n    const state = getState() as AppRootStateType;\r\n    const task = state.tasks[param.todoListId].find(t => t.id === param.taskId);\r\n\r\n    if (!task) {\r\n        return rejectWithValue('Task not found in state');\r\n    }\r\n\r\n    const apiModel: UpdateTaskPayloadType = {\r\n        title: task.title,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await tasksApi.updateTask(param.todoListId, param.taskId, apiModel);\r\n\r\n    try {\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            dispatch(changeTaskEntityStatus({taskId: param.taskId, todoListId: param.todoListId, status: 'succeeded'}));\r\n            // return {todoListId: param.todolistId, taskId: param.taskId, model: param.domainModel};\r\n            return param;\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null);\r\n        }\r\n\r\n    } catch (error) {\r\n        handleServerNetworkError(error.data, dispatch);\r\n        return rejectWithValue(null);\r\n    }\r\n\r\n});\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTaskEntityStatus(state, action: PayloadAction<{ todoListId: string, taskId: string, status: RequestStatusType }>) {\r\n            let tasks = state[action.payload.todoListId];\r\n            let index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index].entityStatus = action.payload.status;\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todoList.id] = [];\r\n            }\r\n        );\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    delete state[action.payload.todolistId];\r\n                }\r\n            }\r\n        );\r\n        builder.addCase(setTodolistsThunk.fulfilled, (state, action) => {\r\n                action.payload.todolists.map(tl => state[tl.id] = []);\r\n            }\r\n        );\r\n        builder.addCase(setTasksThunk.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks.map((task: any) => ({\r\n                    ...task,\r\n                    entityStatus: 'idle'\r\n                }))\r\n            }\r\n        );\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n                let tasks = state[action.meta.arg.todoListId];\r\n                if (tasks) {\r\n                    let index = tasks.findIndex(t => t.id === action.meta.arg.taskId);\r\n                    if (index > -1) {\r\n                        tasks.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n                let tasks = state[action.payload.todoListId];\r\n                tasks.unshift({...action.payload, entityStatus: 'idle'});\r\n            }\r\n        );\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n                let tasks = state[action.payload.todoListId];\r\n                let index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            }\r\n        );\r\n    }\r\n});\r\n\r\n//actions\r\nexport const {changeTaskEntityStatus} = slice.actions;\r\n//reducer\r\nexport const tasksReducer = slice.reducer;\r\n\r\n//thunks\r\n\r\n// export const addTaskTC = (title: string, todoListId: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}));\r\n//     tasksApi.createTask(todoListId, title)\r\n//         .then(res => {\r\n//             if (res.data.resultCode === ResultCodeStatuses.success) {\r\n//                 let task = res.data.data.item;\r\n//                 dispatch(addTaskAC({todoListId, task}));\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}));\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch);\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             handleServerNetworkError(error, dispatch);\r\n//         });\r\n// }\r\n\r\n// export const removeTaskTC = (taskId: string, todoListId: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}));\r\n//     dispatch(changeTodolistEntityStatusAC({id: todoListId, status: 'loading'}));\r\n//     dispatch(changeTaskEntityStatus({todoListId, status: \"loading\", taskId}));\r\n//     tasksApi.deleteTask(todoListId, taskId)\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(removeTaskAC({taskId, todoListId}));\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}));\r\n//                 dispatch(changeTodolistEntityStatusAC({id: todoListId, status: 'succeeded'}));\r\n//                 dispatch(changeTaskEntityStatus({todoListId, taskId, status: 'succeeded'}));\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             handleServerNetworkError(error, dispatch);\r\n//         });\r\n// }\r\n\r\n// export const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskType) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n//\r\n// // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// // те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n//     dispatch(setAppStatusAC({status: 'loading'}));\r\n//     dispatch(changeTaskEntityStatus({status: \"loading\", taskId, todoListId: todolistId}));\r\n//     const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n//     if (!task) {\r\n//         console.warn('Task not found in state');\r\n//         return;\r\n//     }\r\n//     const apiModel: UpdateTaskPayloadType = {\r\n//         title: task.title,\r\n//         startDate: task.startDate,\r\n//         priority: task.priority,\r\n//         description: task.description,\r\n//         deadline: task.deadline,\r\n//         status: task.status,\r\n//         ...domainModel\r\n//     }\r\n//\r\n//     tasksApi.updateTask(todolistId, taskId, apiModel).then((res) => {\r\n//         if (res.data.resultCode === ResultCodeStatuses.success) {\r\n//             const action = updateTaskAC({todoListId: todolistId, taskId, model: domainModel});\r\n//             dispatch(action);\r\n//             dispatch(setAppStatusAC({status: 'succeeded'}));\r\n//             dispatch(changeTaskEntityStatus({taskId, todoListId: todolistId, status: 'succeeded'}));\r\n//         } else {\r\n//             handleServerAppError(res.data, dispatch);\r\n//         }\r\n//     })\r\n//         .catch(error => {\r\n//             handleServerNetworkError(error.data, dispatch);\r\n//         })\r\n//\r\n// }\r\n\r\n// types\r\ntype UpdateDomainTaskType = {\r\n    title?: string;\r\n    description?: string;\r\n    status?: number;\r\n    priority?: number;\r\n    startDate?: string;\r\n    deadline?: string;\r\n}\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType;\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskDomainType>;\r\n}\r\n\r\n\r\nexport type ActionType =\r\n// ReturnType<typeof addTaskAC>\r\n// | ReturnType<typeof removeTaskAC>\r\n//     | ReturnType<typeof updateTaskAC>\r\n// | AddTodolistACType\r\n//     | AddTodolistActionType\r\n    // | RemoveTodolistActionType\r\n    // | SetTodolistsACType\r\n    // | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof changeTaskEntityStatus>\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => Promise<any>;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n    let [valueTask, setValueTask] = useState<string>('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        setValueTask(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            if (valueTask.trim()) {\r\n                props.addItem(valueTask);\r\n                setValueTask('');\r\n            } else {\r\n                setError('Title is required');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const addItemHandler = async () => {\r\n        if (valueTask.trim()) {\r\n            try {\r\n                props.addItem(valueTask);\r\n                setValueTask('');\r\n            } catch (e) {\r\n                setError(e.message);\r\n            }\r\n\r\n\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*  <input\r\n\r\n                value={valueTask}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? 'error' : ''}\r\n            />*/}\r\n            <TextField disabled={props.disabled}\r\n                       variant={\"outlined\"}\r\n                       label={\"Title\"}\r\n                       helperText={error}\r\n                       error={!!error}\r\n                       value={valueTask}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                // className={error ? 'error' : ''}\r\n            />\r\n            {/*<button onClick={addItemHandler}>+</button>*/}\r\n            {/*<Button onClick={addItemHandler} variant={\"contained\"} color={\"primary\"}>+</Button>*/}\r\n            <IconButton onClick={addItemHandler} color={\"primary\"} disabled={props.disabled}\r\n                        style={{marginLeft: '5px'}}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className={'error-message'}>{error}</div>}*/}\r\n        </div>\r\n    );\r\n});","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    value: string;\r\n    onChange: (newValue: string) => void;\r\n    disabled?:boolean\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const disableEditMode = () => {\r\n        setEditMode(false);\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            props.onChange(title);\r\n            disableEditMode();\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ? /*<input value={title}\r\n                          autoFocus\r\n                          onBlur={disableEditMode}\r\n                          onChange={onChangeHandler}\r\n                          onKeyPress={onKeyPressHandler}/>*/\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={disableEditMode}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={props.disabled}\r\n            />\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n    );\r\n});\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"../../../../api/tasks-api\";\r\nimport {TaskDomainType} from \"../../../../state/tasks-reducer\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (id: string, todoListId: string) => void,\r\n    changeStatus: (id: string, status: TaskStatuses, todoListId: string) => void,\r\n    changeTitle: (id: string, todoListId: string, title: string) => void,\r\n    id: string,\r\n    todoListId: string,\r\n    task: TaskDomainType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onRemoveHandler = () => props.removeTask(props.id, props.todoListId);\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(props.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId);\r\n    }\r\n    const onChangeTitleHandler = useCallback((title: string) => {\r\n        props.changeTitle(props.id, props.todoListId, title);\r\n    }, [props.changeTitle, props.id, props.todoListId]);\r\n    return (\r\n        <li key={props.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''} style={{position:'relative'}}>\r\n            {/* <input type=\"checkbox\"\r\n                                       checked={isDone}\r\n                                       onChange={onChangeHandler}/>*/}\r\n            <Checkbox color={\"primary\"}\r\n                      checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeHandler} disabled={props.task.entityStatus === 'loading'}/>\r\n            <EditableSpan value={props.task.title} onChange={onChangeTitleHandler}\r\n                          disabled={props.task.entityStatus === 'loading'}/>\r\n            {/*<span>{title}</span>*/}\r\n            {/*<button onClick={onRemoveHandler}>x</button>*/}\r\n            <IconButton size={'small'} onClick={onRemoveHandler} disabled={props.task.entityStatus === 'loading'} style={{position:'absolute', top:'5px', right:'2px'}}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n});","import React, {useCallback, useEffect} from \"react\";\r\nimport {FilterValueType} from \"../../../trash/App\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Paper,} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses} from \"../../../api/tasks-api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksThunk, TaskDomainType} from \"../../../state/tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../state/app-reducer\";\r\nimport {loginTC} from \"../../Auth/auth-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string,\r\n    entityStatus: RequestStatusType;\r\n    filter: FilterValueType,\r\n    title: string,\r\n    tasks: Array<TaskDomainType>,\r\n    removeTask: (id: string, todoListId: string) => void,\r\n    changeFilter: (value: FilterValueType, todoListId: string) => void,\r\n    addTask: (title: string, id: string) => void,\r\n    changeStatus: (id: string, status: TaskStatuses, todoListId: string) => void,\r\n    removeTodoList: (todoListId: string) => void,\r\n    changeTitle: (id: string, todoListId: string, title: string) => void,\r\n    changeTitleTodoList: (todoListId: string, title: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    const {filter, title, removeTask, changeFilter, addTask, changeStatus, id, removeTodoList, changeTitle, changeTitleTodoList} = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksThunk(id));\r\n    }, []);\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [changeFilter, id]);\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [changeFilter, id]);\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", id), [changeFilter, id]);\r\n\r\n    const onDeleteTodoList = () => removeTodoList(id);\r\n\r\n    const addTaskHandler = useCallback(async (title: string) => {\r\n        const resultAction = await addTask(title, id);\r\n    }, [addTask, id]);\r\n\r\n    const onChangeTitleTodoList = useCallback((title: string) => {\r\n        changeTitleTodoList(id, title);\r\n    }, [changeTitleTodoList, id]);\r\n\r\n    let taskForTodoList = props.tasks;\r\n\r\n    if (filter === 'active') {\r\n        taskForTodoList = props.tasks.filter((task) => task.status === TaskStatuses.New);\r\n\r\n    }\r\n    if (filter === 'completed') {\r\n        taskForTodoList = props.tasks.filter((task) => task.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} style={{position:'relative', padding: \"10px\"}}>\r\n            <IconButton size={\"small\"} onClick={onDeleteTodoList} disabled={props.entityStatus === 'loading'} style={{position:'absolute', top:'5px', right:'5px'}}>\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n            <h3>\r\n                <EditableSpan value={title} onChange={onChangeTitleTodoList}\r\n                              disabled={props.entityStatus === 'loading'}/>\r\n\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTaskHandler} disabled={props.entityStatus === 'loading'}/>\r\n\r\n            <ul style={{listStyleType: \"none\", paddingLeft: \"0\"}}>\r\n                {\r\n                    taskForTodoList.map(task => <Task key={task.id} id={task.id} todoListId={props.id} task={task}\r\n                                                      changeStatus={changeStatus} changeTitle={changeTitle}\r\n                                                      removeTask={removeTask}/>\r\n                    )\r\n                }\r\n                {!taskForTodoList.length && <div style={{ padding:'5px', color:'grey'}}>No task</div>}\r\n            </ul>\r\n            <div>\r\n                <Button color={\"primary\"} variant={filter === 'all' ? \"outlined\" : \"text\"}\r\n                    // className={filter === 'all' ? 'active-filter' : ''}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} variant={filter === 'active' ? \"outlined\" : \"text\"}\r\n                    // className={filter === 'active' ? 'active-filter' : ''}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={\"primary\"} variant={filter === 'completed' ? \"outlined\" : \"text\"}\r\n                    // className={filter === 'completed' ? 'active-filter' : ''}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </Paper>\r\n    );\r\n})\r\n\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;","import React, {useCallback, useEffect} from \"react\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    removeTodolistTC,\r\n    setTodolistsThunk,\r\n    TodolistDomainType\r\n} from \"../../state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {TaskStatuses} from \"../../api/tasks-api\";\r\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"../../state/tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"./Todolist/TodoList\";\r\nimport {FilterValueType} from \"../../app/AppWithRedux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(setTodolistsThunk());\r\n    }, []);\r\n\r\n\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    let tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    let dispatch = useDispatch();\r\n\r\n\r\n    // изменение чекбокса таски\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(updateTaskTC({taskId: id, todoListId, model: {status}}));\r\n    }, [dispatch]);\r\n\r\n\r\n    // Изменение тайтла таски\r\n    const changeTitle = useCallback((id: string, todoListId: string, title: string) => {\r\n        const thunk = updateTaskTC({taskId: id, todoListId, model: {title}});\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n\r\n    // Удаление тасок\r\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\r\n        const action = removeTaskTC({taskId, todoListId});\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    // Добавление таски\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskTC({title, todoListId}))\r\n        // const action = addTaskAC(title, todoListId);\r\n        // dispatch(action);\r\n    }, [dispatch]);\r\n\r\n// изменение фильтра todoList\r\n    const changeFilter = useCallback((value: FilterValueType, todoListId: string) => {\r\n        const action = changeTodolistFilterAC({id: todoListId, filter: value});\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    // Изменение тайтла todoList\r\n    const changeTitleTodoList = useCallback((todoListId: string, title: string) => {\r\n        const action = changeTodolistTitleTC({id: todoListId, title});\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    // Удаление таски-листа\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(removeTodolistTC(todoListId));\r\n        // const action = removeTodolistAC(todoListId);\r\n        // dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    // Добавление todoList\r\n    const addTodoList = useCallback(async (title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"10px\"}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3} style={{flexWrap:'nowrap', overflowX:\"scroll\"}}>\r\n                {\r\n                    todolists.map((tl) => {\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <div style={{ width:'300px'}}>\r\n                                    <TodoList\r\n                                        entityStatus={tl.entityStatus}\r\n                                        title={tl.title}\r\n                                        id={tl.id}\r\n                                        filter={tl.filter}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTitle={changeTitle}\r\n                                        changeTitleTodoList={changeTitleTodoList}\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid></>\r\n    );\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from '../../state/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch();\r\n\r\n    const isOpen = error !== null;\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n});\r\n\r\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware()\r\n        .prepend(\r\n            // correctly typed middlewares can just be used\r\n            thunkMiddleware,\r\n        )\r\n});\r\n\r\nexport type RootReducerType = typeof rootReducer;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>;\r\ntype AppDispatchType = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\nexport default store;","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../state/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {loginTC} from './auth-reducer';\r\nimport {LoginErrorType, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\n\r\n\r\ntype FormValuesType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n}\r\n\r\nconst validate = (values: LoginParamsType) => {\r\n    const errors: LoginErrorType = {};\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Required';\r\n    } else if (values.password.length < 4) {\r\n        errors.password = 'Must be 4 characters or more';\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'free@samuraijs.com',\r\n            password: 'free',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(loginTC(values));\r\n            // if(action.type === loginTC.rejected.type){\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsError?.length) {\r\n                    const error = action.payload?.fieldsError[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n\r\n            // if (res === bad) show error\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {AppRootStateType} from \"../state/store\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized;","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeAppTC} from '../state/app-reducer';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Route} from \"react-router-dom\";\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {logoutTC} from '../features/Auth/auth-reducer';\r\nimport {selectIsInitialized, selectStatus} from \"./selectors\";\r\nimport {authSelectors} from \"../features/Auth\";\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\n// export type TaskStateType = {\r\n//     [key: string]: Array<TaskType>;\r\n// }\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const status = useSelector(selectStatus);\r\n    const isInitialized = useSelector(selectIsInitialized);\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC());\r\n    }, []);\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC());\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n                <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./app/AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./state/store\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <AppWithRedux/>\r\n        </HashRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}